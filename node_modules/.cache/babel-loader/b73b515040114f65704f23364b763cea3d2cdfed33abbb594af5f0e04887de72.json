{"ast":null,"code":"const util = require('util');\nconst fs = require('fs');\nconst axios = require('axios');\nconst isURL = require('is-url');\nconst readFile = util.promisify(fs.readFile);\n\n/**\n * loadImage\n *\n * @name loadImage\n * @function load image from different source\n * @access public\n */\nmodule.exports = async image => {\n  let data = image;\n  if (typeof image === 'undefined') {\n    return image;\n  }\n  if (typeof image === 'string') {\n    if (isURL(image) || image.startsWith('moz-extension://') || image.startsWith('chrome-extension://') || image.startsWith('file://')) {\n      const {\n        data: _data\n      } = await axios.get(image, {\n        responseType: 'arraybuffer'\n      });\n      data = _data;\n    } else if (/data:image\\/([a-zA-Z]*);base64,([^\"]*)/.test(image)) {\n      data = Buffer.from(image.split(',')[1], 'base64');\n    } else {\n      data = await readFile(image);\n    }\n  } else if (Buffer.isBuffer(image)) {\n    data = image;\n  }\n  return new Uint8Array(data);\n};","map":{"version":3,"names":["util","require","fs","axios","isURL","readFile","promisify","module","exports","image","data","startsWith","_data","get","responseType","test","Buffer","from","split","isBuffer","Uint8Array"],"sources":["C:/Users/DELL/OneDrive/Desktop/reactfileupload/uploadpage/node_modules/tesseract.js/src/worker/node/loadImage.js"],"sourcesContent":["const util = require('util');\nconst fs = require('fs');\nconst axios = require('axios');\nconst isURL = require('is-url');\n\nconst readFile = util.promisify(fs.readFile);\n\n/**\n * loadImage\n *\n * @name loadImage\n * @function load image from different source\n * @access public\n */\nmodule.exports = async (image) => {\n  let data = image;\n  if (typeof image === 'undefined') {\n    return image;\n  }\n\n  if (typeof image === 'string') {\n    if (isURL(image) || image.startsWith('moz-extension://') || image.startsWith('chrome-extension://') || image.startsWith('file://')) {\n      const { data: _data } = await axios.get(image, { responseType: 'arraybuffer' });\n      data = _data;\n    } else if (/data:image\\/([a-zA-Z]*);base64,([^\"]*)/.test(image)) {\n      data = Buffer.from(image.split(',')[1], 'base64');\n    } else {\n      data = await readFile(image);\n    }\n  } else if (Buffer.isBuffer(image)) {\n    data = image;\n  }\n\n  return new Uint8Array(data);\n};\n"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AACxB,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAMG,KAAK,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAE/B,MAAMI,QAAQ,GAAGL,IAAI,CAACM,SAAS,CAACJ,EAAE,CAACG,QAAQ,CAAC;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,MAAM,CAACC,OAAO,GAAG,MAAOC,KAAK,IAAK;EAChC,IAAIC,IAAI,GAAGD,KAAK;EAChB,IAAI,OAAOA,KAAK,KAAK,WAAW,EAAE;IAChC,OAAOA,KAAK;EACd;EAEA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,IAAIL,KAAK,CAACK,KAAK,CAAC,IAAIA,KAAK,CAACE,UAAU,CAAC,kBAAkB,CAAC,IAAIF,KAAK,CAACE,UAAU,CAAC,qBAAqB,CAAC,IAAIF,KAAK,CAACE,UAAU,CAAC,SAAS,CAAC,EAAE;MAClI,MAAM;QAAED,IAAI,EAAEE;MAAM,CAAC,GAAG,MAAMT,KAAK,CAACU,GAAG,CAACJ,KAAK,EAAE;QAAEK,YAAY,EAAE;MAAc,CAAC,CAAC;MAC/EJ,IAAI,GAAGE,KAAK;IACd,CAAC,MAAM,IAAI,wCAAwC,CAACG,IAAI,CAACN,KAAK,CAAC,EAAE;MAC/DC,IAAI,GAAGM,MAAM,CAACC,IAAI,CAACR,KAAK,CAACS,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC;IACnD,CAAC,MAAM;MACLR,IAAI,GAAG,MAAML,QAAQ,CAACI,KAAK,CAAC;IAC9B;EACF,CAAC,MAAM,IAAIO,MAAM,CAACG,QAAQ,CAACV,KAAK,CAAC,EAAE;IACjCC,IAAI,GAAGD,KAAK;EACd;EAEA,OAAO,IAAIW,UAAU,CAACV,IAAI,CAAC;AAC7B,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}